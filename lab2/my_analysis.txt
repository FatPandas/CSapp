---------------------------
run the bomb with my answer
---------------------------

Linux> ./bomb my_answers.txt 
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
So you got that one.  Try this one.
Good work!  On to the next...
Congratulations! You've defused the bomb!

--------
phase_1 
--------

[Answer]
Border relations with Canada have never been better.

--------
phase_2 
--------

[Answer]
1 2 4 8 16 32 a1 a2 a3 ...
--------------

[Analysis]
(gdb) disas phase_2
Dump of assembler code for function phase_2:
   0x0000000000400efc <+0>:	push   %rbp                        // save %rbp
   0x0000000000400efd <+1>:	push   %rbx                        // save %rbx
   0x0000000000400efe <+2>:	sub    $0x28,%rsp                  // %rsp -= 0x28 (0x28 = 40)
   0x0000000000400f02 <+6>:	mov    %rsp,%rsi                   // y = %rsp
   0x0000000000400f05 <+9>:	callq  0x40145c <read_six_numbers> // should return 6, which means input string looks like "x x x x x x ..."
   0x0000000000400f0a <+14>:	cmpl   $0x1,(%rsp)                 // *(%rsp) should be equal to 0x1
   0x0000000000400f0e <+18>:	je     0x400f30 <phase_2+52>
   0x0000000000400f10 <+20>:	callq  0x40143a <explode_bomb>
   0x0000000000400f15 <+25>:	jmp    0x400f30 <phase_2+52>
   0x0000000000400f17 <+27>:	mov    -0x4(%rbx),%eax             // result = *(%rbx - 0x4)
   0x0000000000400f1a <+30>:	add    %eax,%eax                   // result += result
   0x0000000000400f1c <+32>:	cmp    %eax,(%rbx)                 // *(%rbx) should be equal to result
   0x0000000000400f1e <+34>:	je     0x400f25 <phase_2+41>
   0x0000000000400f20 <+36>:	callq  0x40143a <explode_bomb>
   0x0000000000400f25 <+41>:	add    $0x4,%rbx                   // %rbx = %rbx + 0x4
   0x0000000000400f29 <+45>:	cmp    %rbp,%rbx                   // if (%rbx == %rbp) goto <+64>
   0x0000000000400f2c <+48>:	jne    0x400f17 <phase_2+27>
   0x0000000000400f2e <+50>:	jmp    0x400f3c <phase_2+64>
   0x0000000000400f30 <+52>:	lea    0x4(%rsp),%rbx              // %rbx = %rsp + 0x4
   0x0000000000400f35 <+57>:	lea    0x18(%rsp),%rbp             // %rbp = %rsp + 0x18
   0x0000000000400f3a <+62>:	jmp    0x400f17 <phase_2+27>
   0x0000000000400f3c <+64>:	add    $0x28,%rsp
   0x0000000000400f40 <+68>:	pop    %rbx
   0x0000000000400f41 <+69>:	pop    %rbp
   0x0000000000400f42 <+70>:	retq  
End of assembler dump.
------------------------
000000000040145c <read_six_numbers>: arg1: %rdi(myinput) arg2: %rsi. read first six numbers from myinput
  40145c:	48 83 ec 18          	sub    $0x18,%rsp       // %rsp -= 0x18
  401460:	48 89 f2             	mov    %rsi,%rdx        // arg3 = arg2
  401463:	48 8d 4e 04          	lea    0x4(%rsi),%rcx   // arg4 = arg2 + 0x4
  401467:	48 8d 46 14          	lea    0x14(%rsi),%rax  // result = arg2 + 0x14
  40146b:	48 89 44 24 08       	mov    %rax,0x8(%rsp)   // arg8: *(%rsp + 0x8) = result
  401470:	48 8d 46 10          	lea    0x10(%rsi),%rax  // result = arg2 + 0x10
  401474:	48 89 04 24          	mov    %rax,(%rsp)      // arg7: *(%rsp) = result
  401478:	4c 8d 4e 0c          	lea    0xc(%rsi),%r9    // arg6 = arg2 + 0xc
  40147c:	4c 8d 46 08          	lea    0x8(%rsi),%r8    // arg5 = arg2 + 0x8
  401480:	be c3 25 40 00       	mov    $0x4025c3,%esi   // arg2 = 0x4025c3 (*(0x4025c3) == "%d %d %d %d %d %d")
  401485:	b8 00 00 00 00       	mov    $0x0,%eax        // result = 0x0
  40148a:	e8 61 f7 ff ff       	callq  400bf0 <__isoc99_sscanf@plt> // sscanf(arg1,...,arg6)
  40148f:	83 f8 05             	cmp    $0x5,%eax        // result should be greater than 0x5 to avoid bomb, thus 6
  401492:	7f 05                	jg     401499 <read_six_numbers+0x3d>
  401494:	e8 a1 ff ff ff       	callq  40143a <explode_bomb>
  401499:	48 83 c4 18          	add    $0x18,%rsp
  40149d:	c3                   	retq  
----------------

[what I found]
1.based one <read_six_numbers> function, it should return 6, and phase_2's input string should like "x x x x x x ..."
2.After the loop in <+27>: *(rsp + 0x4) = 2, *(rsp + 0x8) = 4, ... , *(rsp + 0x20) = 32
3.Inside the read_six_numbers function, since *y == 1(phase_2 <+14>), after this function get called,
  we should have *arg3 = 1,  *arg4 = 2, *arg8 = 32, *arg7 = 16, *arg6 = 8, *arg5 = 4
4.Therefore:
  arg1: myinput
  arg2: "%d %d %d %d %d %d"
  *arg3: 1
  *arg4: 2
  *arg5: 4
  *arg6: 8
  *arg7: 16
  *arg8: 32
5. myinput is "1 2 4 8 16 32 ..." (... means input does not necessarily have only first 6 integers inside it)

--------
phase_3
--------

[Answer: 8 possible answers, choose any one of them]
     0        207
     1        311
     2        707
     3        256
     4        389
     5        206
     6        682
     7        327
------------------

[Analysis]
(gdb) disas phase_3
Dump of assembler code for function phase_3:
   0x0000000000400f43 <+0>:	sub    $0x18,%rsp
   0x0000000000400f47 <+4>:	lea    0xc(%rsp),%rcx                 // arg4 = %rsp + 0xc
   0x0000000000400f4c <+9>:	lea    0x8(%rsp),%rdx                 // arg3 = %rsp + 0x8
   0x0000000000400f51 <+14>:	mov    $0x4025cf,%esi                 // *y = "%d %d"
   0x0000000000400f56 <+19>:	mov    $0x0,%eax                      // val = 0
   0x0000000000400f5b <+24>:	callq  0x400bf0 <__isoc99_sscanf@plt> // enter sscanf(x, y, ...)
   0x0000000000400f60 <+29>:	cmp    $0x1,%eax                      // compare result:0x1
   0x0000000000400f63 <+32>:	jg     0x400f6a <phase_3+39>          // result should be greater than 1, thus sscanf() return 2. (result == 2)
   0x0000000000400f65 <+34>:	callq  0x40143a <explode_bomb>
   0x0000000000400f6a <+39>:	cmpl   $0x7,0x8(%rsp)                 // *(%rsp + 0x8) is *arg3. compare *arg4:0x7 (switch-case)
   0x0000000000400f6f <+44>:	ja     0x400fad <phase_3+106>         // if (*arg3 > 7) --> bomb!!!
   0x0000000000400f71 <+46>:	mov    0x8(%rsp),%eax                 // val = *(%rsp + 0x8) = *arg3 (<7)
   0x0000000000400f75 <+50>:	jmpq   *0x402470(,%rax,8)             // goto *(0x402470 + 8*val) | (gdb) x /8xg 0x402470 return Jump table
   0x0000000000400f7c <+57>:	mov    $0xcf,%eax                     // case 0: val = 0xcf
   0x0000000000400f81 <+62>:	jmp    0x400fbe <phase_3+123>         // goto
   0x0000000000400f83 <+64>:	mov    $0x2c3,%eax                    // case 2: val = 0x2c3
   0x0000000000400f88 <+69>:	jmp    0x400fbe <phase_3+123>         // goto
   0x0000000000400f8a <+71>:	mov    $0x100,%eax                    // case 3: val = 0x100
   0x0000000000400f8f <+76>:	jmp    0x400fbe <phase_3+123>         // goto
   0x0000000000400f91 <+78>:	mov    $0x185,%eax                    // case 4: val = 0x185
   0x0000000000400f96 <+83>:	jmp    0x400fbe <phase_3+123>         // goto
   0x0000000000400f98 <+85>:	mov    $0xce,%eax                     // case 5: val = 0xce
   0x0000000000400f9d <+90>:	jmp    0x400fbe <phase_3+123>         // goto
   0x0000000000400f9f <+92>:	mov    $0x2aa,%eax                    // case 6: val = 0x2aa
   0x0000000000400fa4 <+97>:	jmp    0x400fbe <phase_3+123>         // goto
   0x0000000000400fa6 <+99>:	mov    $0x147,%eax                    // case 7: val = 0x147       
   0x0000000000400fab <+104>:	jmp    0x400fbe <phase_3+123>         // goto
   0x0000000000400fad <+106>:	callq  0x40143a <explode_bomb>
   0x0000000000400fb2 <+111>:	mov    $0x0,%eax                      // default: val = 0;
   0x0000000000400fb7 <+116>:	jmp    0x400fbe <phase_3+123>
   0x0000000000400fb9 <+118>:	mov    $0x137,%eax                    // case 1: val = 0x137
   0x0000000000400fbe <+123>:	cmp    0xc(%rsp),%eax                 // if (val == *(%rsp + 0xc), which is *arg4), we are done
   0x0000000000400fc2 <+127>:	je     0x400fc9 <phase_3+134>
   0x0000000000400fc4 <+129>:	callq  0x40143a <explode_bomb>
   0x0000000000400fc9 <+134>:	add    $0x18,%rsp
   0x0000000000400fcd <+138>:	retq   
End of assembler dump.
-----------------------
Jump table:
(gdb) x /8xg 0x402470
0x402470:	0x0000000000400f7c	0x0000000000400fb9
0x402480:	0x0000000000400f83	0x0000000000400f8a
0x402490:	0x0000000000400f91	0x0000000000400f98
0x4024a0:	0x0000000000400f9f	0x0000000000400fa6
----------------------

[What I found]
1. *arg3 and *arg4 get assigned by calling sscanf.
2. sscanf return 2, therefore input string looks like "X X".
3. case *arg3: val get assigned, and val == *arg4, then we are done.
4. *arg3 could be 0, 1, 2, 3, 4, 5, 6, 7
5. Therefore, there shoul be 8 possible answers:
   *arg3     *arg4
     0        207
     1        311
     2        707
     3        256
     4        389
     5        206
     6        682
     7        327
----------------------

--------
phase_4
--------

[Answer: 4 possible answers, choose any one of them]
   0   0
   1   0
   3   0
   7   0

----------

[Analysis]
(gdb) disas phase_4
Dump of assembler code for function phase_4:
   0x000000000040100c <+0>:	sub    $0x18,%rsp
   0x0000000000401010 <+4>:	lea    0xc(%rsp),%rcx                  // arg4 = %rsp + 0xc
   0x0000000000401015 <+9>:	lea    0x8(%rsp),%rdx                  // arg3 = %rsp + 0x8
   0x000000000040101a <+14>:	mov    $0x4025cf,%esi                  // *arg2: "%d, %d"
   0x000000000040101f <+19>:	mov    $0x0,%eax                       // val = 0
   0x0000000000401024 <+24>:	callq  0x400bf0 <__isoc99_sscanf@plt>  // sscanf(myinput, arg2, arg3, arg4)
   0x0000000000401029 <+29>:	cmp    $0x2,%eax                       // compare result:0x2
   0x000000000040102c <+32>:	jne    0x401035 <phase_4+41>           // should be equal, so result == 2, myinput: "X X"
   0x000000000040102e <+34>:	cmpl   $0xe,0x8(%rsp)                  // compare *(%rsp + 0x8):0xe --> *arg3:0xe
   0x0000000000401033 <+39>:	jbe    0x40103a <phase_4+46>           // if unsigned <=, goto <+46>. Therefore, 0 <= *arg3 <= 0xe
   0x0000000000401035 <+41>:	callq  0x40143a <explode_bomb>
   0x000000000040103a <+46>:	mov    $0xe,%edx                       // arg3 = 0xe
   0x000000000040103f <+51>:	mov    $0x0,%esi                       // arg2 = 0
   0x0000000000401044 <+56>:	mov    0x8(%rsp),%edi                  // arg1 = *(%rsp + 0x8) (sscanf processed value *arg3)
   0x0000000000401048 <+60>:	callq  0x400fce <func4>                // func4(arg1, arg2, arg3)
   0x000000000040104d <+65>:	test   %eax,%eax                       // result should be 0
   0x000000000040104f <+67>:	jne    0x401058 <phase_4+76>
   0x0000000000401051 <+69>:	cmpl   $0x0,0xc(%rsp)                  // compare *(%rsp + 0xc):0 --> sscanf processed value *arg4:0
   0x0000000000401056 <+74>:	je     0x40105d <phase_4+81>           // if equal, goto <+81>
   0x0000000000401058 <+76>:	callq  0x40143a <explode_bomb>         // else bomb!!! Therefore, sscanf processed value *arg4 == 0
   0x000000000040105d <+81>:	add    $0x18,%rsp
   0x0000000000401061 <+85>:	retq   
End of assembler dump.
----------------------
(gdb) disas func4
Dump of assembler code for function func4:
   0x0000000000400fce <+0>:	sub    $0x8,%rsp
   0x0000000000400fd2 <+4>:	mov    %edx,%eax               // val = arg3             
   0x0000000000400fd4 <+6>:	sub    %esi,%eax               // val -= arg2            
   0x0000000000400fd6 <+8>:	mov    %eax,%ecx               // arg4 = val             
   0x0000000000400fd8 <+10>:	shr    $0x1f,%ecx              // arg4 >> 31 logical      
   0x0000000000400fdb <+13>:	add    %ecx,%eax               // val += arg4
   0x0000000000400fdd <+15>:	sar    %eax                    // val >> 1   Arithmetic
   0x0000000000400fdf <+17>:	lea    (%rax,%rsi,1),%ecx      // arg4 = val + arg2
   0x0000000000400fe2 <+20>:	cmp    %edi,%ecx               // compare arg4:arg1
   0x0000000000400fe4 <+22>:	jle    0x400ff2 <func4+36>     // if less or equal, goto <+36>
   0x0000000000400fe6 <+24>:	lea    -0x1(%rcx),%edx         // else, arg3 = arg4 - 1
   0x0000000000400fe9 <+27>:	callq  0x400fce <func4>        // recursion func4(arg1, arg2, arg3)
   0x0000000000400fee <+32>:	add    %eax,%eax               // result += result
   0x0000000000400ff0 <+34>:	jmp    0x401007 <func4+57>     // goto <+57>
   0x0000000000400ff2 <+36>:	mov    $0x0,%eax               // result = 0
   0x0000000000400ff7 <+41>:	cmp    %edi,%ecx               // compare arg4:arg1
   0x0000000000400ff9 <+43>:	jge    0x401007 <func4+57>     // if greater or equal, goto <+57>
   0x0000000000400ffb <+45>:	lea    0x1(%rcx),%esi          // else arg2 = arg4 + 1
   0x0000000000400ffe <+48>:	callq  0x400fce <func4>        // recursion func4(arg1, arg2, arg3)
   0x0000000000401003 <+53>:	lea    0x1(%rax,%rax,1),%eax   // result = 2*result + 1
   0x0000000000401007 <+57>:	add    $0x8,%rsp               
   0x000000000040100b <+61>:	retq                           // return result
End of assembler dump.
----------------------

I think the C code of func4 is the following one:

// arg a is what I want, and 0 <= a <= 14 --> input string: "a 0"
// initial args: a, b = 0, c = 14; func4 should return 0;
int func4(int a, int b, int c) {
    int val = b + [(c - b) + (c - b) >>L 31] >>A 1;
    if (val > a) {
        c = val - 1;
        int result = func4(a, b, c);
        result += result;
    }
    else {
        int result = 0;
        if (val == a);
        // val < a
        else { 
            b = val + 1;
            result = func4(a, b, c);
            result = 2 * result + 1;
        }
    }
    return result;
}
-------------------

[What I found]
1. Similar to phase_3, input string looks like "X X", where X denotes to integer
2. func4 should return 0 to avoid bomb
3. according to phase_4 <+69>, sscanf processed value *arg4 == 0, so input string: "X 0"
4. phase_4 <+39>: 0 =< *arg3 <= 14
5. according to C code of func4, a could be 0, 1, 3, 7
-------------------

--------
phase_5
--------

[Answer: many possible answers, which follows the pattern below]
	1st char: 0x_9
        2nd char: 0x_f
        3rd char: 0x_e
        4th char: 0x_5
        5th char: 0x_6
        6th char: 0x_7

FOR EXAMPLE: 
             )?N5Vw
             9on567
--------

[Analysis]

(gdb) disas phase_5
Dump of assembler code for function phase_5:
   0x0000000000401062 <+0>:	push   %rbx                            // save %rbx
   0x0000000000401063 <+1>:	sub    $0x20,%rsp                      // %rsp -= 32
   0x0000000000401067 <+5>:	mov    %rdi,%rbx                       // %rbx = x
   0x000000000040106a <+8>:	mov    %fs:0x28,%rax                   // canary
   0x0000000000401073 <+17>:	mov    %rax,0x18(%rsp)                 // canary
   0x0000000000401078 <+22>:	xor    %eax,%eax                       // canary
   0x000000000040107a <+24>:	callq  0x40131b <string_length>        // return length of input string 
   0x000000000040107f <+29>:	cmp    $0x6,%eax                       // compare result(length):6
   0x0000000000401082 <+32>:	je     0x4010d2 <phase_5+112>          // if equal to 6, goto <+112> 
   0x0000000000401084 <+34>:	callq  0x40143a <explode_bomb>         // length of input string should be 6
   0x0000000000401089 <+39>:	jmp    0x4010d2 <phase_5+112>
   0x000000000040108b <+41>:	movzbl (%rbx,%rax,1),%ecx              // %rcx = *(%rbx + %rax)         For Loop
   0x000000000040108f <+45>:	mov    %cl,(%rsp)                      // *(%rsp) = %rcx
   0x0000000000401092 <+48>:	mov    (%rsp),%rdx                     // %rdx = *(rsp)
   0x0000000000401096 <+52>:	and    $0xf,%edx                       // %rdx = %rdx & 0xf
   0x0000000000401099 <+55>:	movzbl 0x4024b0(%rdx),%edx             // %rdx = *(%rdx + 0x4024b0)
   0x00000000004010a0 <+62>:	mov    %dl,0x10(%rsp,%rax,1)           // *(0x10 + %rsp + %rax) = %rdx
   0x00000000004010a4 <+66>:	add    $0x1,%rax                       // %rax += 1
   0x00000000004010a8 <+70>:	cmp    $0x6,%rax                       // compare %rax:6
   0x00000000004010ac <+74>:	jne    0x40108b <phase_5+41>           // if not equal, goto <+41>
   0x00000000004010ae <+76>:	movb   $0x0,0x16(%rsp)                 // *(%rsp + 0x16) = 0
   0x00000000004010b3 <+81>:	mov    $0x40245e,%esi                  // arg2 = 0x40245e        x /s 0x40245e: "flyers"
   0x00000000004010b8 <+86>:	lea    0x10(%rsp),%rdi                 // arg1 = %rsp + 0x10     (%rsp + 0x10) == "flyers"
   0x00000000004010bd <+91>:	callq  0x401338 <strings_not_equal>    // if the two strings not equal, return 1; 0 otherwise
   0x00000000004010c2 <+96>:	test   %eax,%eax                       // return value == 0?
   0x00000000004010c4 <+98>:	je     0x4010d9 <phase_5+119>          // if equal to 0, goto <+119>
   0x00000000004010c6 <+100>:	callq  0x40143a <explode_bomb>         // thus strings_not_equal should return 0 --> the two strings are the same
   0x00000000004010cb <+105>:	nopl   0x0(%rax,%rax,1)
   0x00000000004010d0 <+110>:	jmp    0x4010d9 <phase_5+119>
   0x00000000004010d2 <+112>:	mov    $0x0,%eax                       // %rax  = 0
   0x00000000004010d7 <+117>:	jmp    0x40108b <phase_5+41>
   0x00000000004010d9 <+119>:	mov    0x18(%rsp),%rax                 // canary
   0x00000000004010de <+124>:	xor    %fs:0x28,%rax                   // canary
   0x00000000004010e7 <+133>:	je     0x4010ee <phase_5+140>
   0x00000000004010e9 <+135>:	callq  0x400b30 <__stack_chk_fail@plt> // canary
   0x00000000004010ee <+140>:	add    $0x20,%rsp
   0x00000000004010f2 <+144>:	pop    %rbx
   0x00000000004010f3 <+145>:	retq   
End of assembler dump.
----------------------

[What I found]
1. length of input string should be 6. <phase_5+29>
2. strings_not_equal(arg1, arg2), arg2 == "flyers" --> arg1 or (%rsp + 0x10) == "flyers" 
3. from <phase_5+86>, *(%rsp + 0x10 + i) = {"f", i = 0; "l", i = 1; "y", i = 2; "e", i = 3; "r", i = 4; "s", i = 5}
   from <phase_5+41>, *(%rbx + i) = input[i], where input is phase_5()'s correct argument.
   from <phase_5+55> and <+62>, *(input[i]&0xf + 0x4024b0) == *(%rsp + 0x10 + i). firstly:
   (gdb) x /s 0x4024b0
	0x4024b0 <array.3449>:	"maduiersnfotvbylSo you think you can stop the bomb with ctrl-c, do you?"
   we know that indices of "f", "l", "y", "e", "r", "s" in the array above are 9, 15, 14, 5, 6, 7, respectively.
   It means that (input[i]&0xf) should equal to these values, e.g. (input[0]&0xf) should be 9, so that *(%rsp + 0x10 + 0) can be "f".
   Here, when i == 0, input[0] == 0x_9. Every char with this hex pattern is our choice.
4. Therefore, again, we have lots of answers... any answers with the pattern below could work:
   "xxxxxx", 6 char, each char's hex representation:
        1st char: 0x_9
        2nd char: 0x_f
        3rd char: 0x_e
        4th char: 0x_5
        5th char: 0x_6
        6th char: 0x_7
----------------------

-------
phase_6
-------

[Answer]

4 3 2 1 6 5 a1 a2 a3 ...
------------

[Analysis]

(gdb) disas phase_6
Dump of assembler code for function phase_6:
   0x00000000004010f4 <+0>:	push   %r14 // temp3
   0x00000000004010f6 <+2>:	push   %r13 // temp2
   0x00000000004010f8 <+4>:	push   %r12 // temp1
   0x00000000004010fa <+6>:	push   %rbp
   0x00000000004010fb <+7>:	push   %rbx
   0x00000000004010fc <+8>:	sub    $0x50,%rsp                   // allocate 80 bytes stack frame
   0x0000000000401100 <+12>:	mov    %rsp,%r13                    // temp2 = %rsp
   0x0000000000401103 <+15>:	mov    %rsp,%rsi                    // arg2 = %rsp (arg2 is the 3rd arg of sscanf() inside read_six_numbers())
   0x0000000000401106 <+18>:	callq  0x40145c <read_six_numbers>  // showed before, this function returns 6, input:"X X X X X X ..."
   0x000000000040110b <+23>:	mov    %rsp,%r14                    // temp3 = %rsp (*(%rsp) = *arg2)
   0x000000000040110e <+26>:	mov    $0x0,%r12d                   // temp1 = 0
   0x0000000000401114 <+32>:	mov    %r13,%rbp                    // %rbp = temp2                                  For loop  
   0x0000000000401117 <+35>:	mov    0x0(%r13),%eax               // val = *temp2
   0x000000000040111b <+39>:	sub    $0x1,%eax                    // val = val - 1
   0x000000000040111e <+42>:	cmp    $0x5,%eax                    // compare val:5
   0x0000000000401121 <+45>:	jbe    0x401128 <phase_6+52>        // if unsigned <=, goto <+52>
   0x0000000000401123 <+47>:	callq  0x40143a <explode_bomb>      // val should <= 5 --> *arg2 <= 6
   0x0000000000401128 <+52>:	add    $0x1,%r12d                   // temp1 += 1
   0x000000000040112c <+56>:	cmp    $0x6,%r12d                   // compare temp1:6
   0x0000000000401130 <+60>:	je     0x401153 <phase_6+95>        // if equal. goto <+95>
   0x0000000000401132 <+62>:	mov    %r12d,%ebx                   // else, %rbx = temp1
   0x0000000000401135 <+65>:	movslq %ebx,%rax                    // val = %rbx                                    For loop (nested)
   0x0000000000401138 <+68>:	mov    (%rsp,%rax,4),%eax           // val = *(%rsp + 4*val)
   0x000000000040113b <+71>:	cmp    %eax,0x0(%rbp)               // compare *(%rbp):val, *(%rbp) is *arg2
   0x000000000040113e <+74>:	jne    0x401145 <phase_6+81>        // if not equal, goto <+81>
   0x0000000000401140 <+76>:	callq  0x40143a <explode_bomb>      // --> *arg2 != val
   0x0000000000401145 <+81>:	add    $0x1,%ebx                    // %rbx += 1
   0x0000000000401148 <+84>:	cmp    $0x5,%ebx                    // compare %rbx:5  
   0x000000000040114b <+87>:	jle    0x401135 <phase_6+65>        // if <=, goto <+65> 
   0x000000000040114d <+89>:	add    $0x4,%r13                    // else temp2 += 4 --> %rsp + 4i
   0x0000000000401151 <+93>:	jmp    0x401114 <phase_6+32>        // goto <+32>
   0x0000000000401153 <+95>:	lea    0x18(%rsp),%rsi              // arg2 = %rsp + 24                              For loop teminates
   0x0000000000401158 <+100>:	mov    %r14,%rax                    // val = temp3
   0x000000000040115b <+103>:	mov    $0x7,%ecx                    // %rcx = 7
   0x0000000000401160 <+108>:	mov    %ecx,%edx                    // %rdx = %rcx                                   Do-While loop
   0x0000000000401162 <+110>:	sub    (%rax),%edx                  // %rdx -= *val
   0x0000000000401164 <+112>:	mov    %edx,(%rax)                  // *val = %rdx
   0x0000000000401166 <+114>:	add    $0x4,%rax                    // val += 4
   0x000000000040116a <+118>:	cmp    %rsi,%rax                    // compare val:arg2
   0x000000000040116d <+121>:	jne    0x401160 <phase_6+108>       // if not equal, goto <+108>
   0x000000000040116f <+123>:	mov    $0x0,%esi                    // arg2 = 0                                      Do-While loop teminates
   0x0000000000401174 <+128>:	jmp    0x401197 <phase_6+163>       // goto <+163>

   0x0000000000401176 <+130>:	mov    0x8(%rdx),%rdx               // %rdx = *(%rdx + 8)                            Do-While loop (nested)
   0x000000000040117a <+134>:	add    $0x1,%eax                    // val += 1
   0x000000000040117d <+137>:	cmp    %ecx,%eax                    // compare val:%rcx
   0x000000000040117f <+139>:	jne    0x401176 <phase_6+130>       // if not equal, goto <+130>
   0x0000000000401181 <+141>:	jmp    0x401188 <phase_6+148>       // else, goto <+148>
   0x0000000000401183 <+143>:	mov    $0x6032d0,%edx               // %rdx = 0x6032d0                               0x6032d0: node (important!)
   0x0000000000401188 <+148>:	mov    %rdx,0x20(%rsp,%rsi,2)       // *(%rsp + 32 + 2*arg2) = %rdx
   0x000000000040118d <+153>:	add    $0x4,%rsi                    // arg2 += 4
   0x0000000000401191 <+157>:	cmp    $0x18,%rsi                   // compare arg2:24
   0x0000000000401195 <+161>:	je     0x4011ab <phase_6+183>       // if equal, goto <+183>
   0x0000000000401197 <+163>:	mov    (%rsp,%rsi,1),%ecx           // %rcx = *(%rsp + arg2)                         Do-While loop
   0x000000000040119a <+166>:	cmp    $0x1,%ecx                    // compare %rcx:1
   0x000000000040119d <+169>:	jle    0x401183 <phase_6+143>       // if <=, goto <+143>
   0x000000000040119f <+171>:	mov    $0x1,%eax                    // else val = 1
   0x00000000004011a4 <+176>:	mov    $0x6032d0,%edx               // %rdx = 0x6032d0
   0x00000000004011a9 <+181>:	jmp    0x401176 <phase_6+130>       // goto <+130>

   0x00000000004011ab <+183>:	mov    0x20(%rsp),%rbx              // %rbx = *(%rsp + 32)
   0x00000000004011b0 <+188>:	lea    0x28(%rsp),%rax              // val = %rsp + 40
   0x00000000004011b5 <+193>:	lea    0x50(%rsp),%rsi              // arg2 = %rsp + 80
   0x00000000004011ba <+198>:	mov    %rbx,%rcx                    // %rcx = %rbx
   0x00000000004011bd <+201>:	mov    (%rax),%rdx                  // %rdx = *val
   0x00000000004011c0 <+204>:	mov    %rdx,0x8(%rcx)               // *(%rcx + 8) = %rdx         // a1's node -> a2's node -> ... -> a6's node
   0x00000000004011c4 <+208>:	add    $0x8,%rax                    // val += 8
   0x00000000004011c8 <+212>:	cmp    %rsi,%rax                    // compare val:arg2
   0x00000000004011cb <+215>:	je     0x4011d2 <phase_6+222>       // if equal, goto <+222>
   0x00000000004011cd <+217>:	mov    %rdx,%rcx                    // else, %rcx = %rdx
   0x00000000004011d0 <+220>:	jmp    0x4011bd <phase_6+201>       // goto <+201>
   0x00000000004011d2 <+222>:	movq   $0x0,0x8(%rdx)               // *(%rdx + 8) = 0
   0x00000000004011da <+230>:	mov    $0x5,%ebp                    // %rbp = 5
   0x00000000004011df <+235>:	mov    0x8(%rbx),%rax               // val = *(%rbx + 8)          // go to next node
   0x00000000004011e3 <+239>:	mov    (%rax),%eax                  // val = *val                 // the value of the next node
   0x00000000004011e5 <+241>:	cmp    %eax,(%rbx)                  // compare *(%rbx):val        // *(%rbx) the value of the current node
   0x00000000004011e7 <+243>:	jge    0x4011ee <phase_6+250>       // if >=, goto <+250>         // current.value >= next.value
   0x00000000004011e9 <+245>:	callq  0x40143a <explode_bomb>      // --> *(%rbx) should >= val
   0x00000000004011ee <+250>:	mov    0x8(%rbx),%rbx               // %rbx = *(%rbx + 8)         // current node is next
   0x00000000004011f2 <+254>:	sub    $0x1,%ebp                    // %rbp -= 1
   0x00000000004011f5 <+257>:	jne    0x4011df <phase_6+235>       // if != 0, goto <+235>
   0x00000000004011f7 <+259>:	add    $0x50,%rsp                   // deallocate
   0x00000000004011fb <+263>:	pop    %rbx
   0x00000000004011fc <+264>:	pop    %rbp
   0x00000000004011fd <+265>:	pop    %r12
   0x00000000004011ff <+267>:	pop    %r13
   0x0000000000401201 <+269>:	pop    %r14
   0x0000000000401203 <+271>:	retq   
End of assembler dump.
----------------------

[What I found]
1. similar to phase_2, input string: "a1 a2 a3 a4 a5 a6 ..."
2. those ints assigned to (%rsi + 4*i), where i = 0, 1, 2, 3, 4, 5, are my interests.
3. <phase_6+65>: a1 != a2 != a3 != a4 != a5 != a6
4. <+47>: ai <= 6, for i = 1, 2, 3, 4, 5, 6
5. <+103>: *(%rsp + 4*(i-1)) = 7 - ai, (7-ai) >= 1
6. <+130>-<+181>: do-while loop with a nested do-while loop. This block is important, for each ai, it attached a node to ai (*(%rsp + 32 + 4*(i-1)))
7. 0x6032d0 denotes to first node, use "x /x 0x6032d0" to find next node's address, and so forth.
8. last part of the assembly code is about node relink <+204>, and node's value compare to get the final set of ai
9. use "x /8x address of node" to get the node's value. little Endian, first 32 bit (int).
----------------------




